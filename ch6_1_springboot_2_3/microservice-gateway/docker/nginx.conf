worker_processes 1;

events {
  worker_connections 1024;
}

http {
  include mime.types;
  default_type application/octet-stream;
  sendfile on;

  keepalive_timeout 65;

  # load balancing (actually in this example it does not have, just for a show case)
  upstream search {
    server search-microservice:8083;
  }

  upstream fares {
    server fares-microservice:8082;
  }

  upstream checkin {
    server checkin-microservice:8081;
  }

  upstream book {
    server book-microservice:8080;
  }

  server {
    listen 8083;
    server_name microservice-gateway;
    location / {
      proxy_redirect off;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_pass http://search; # reverse proxy
    }
  }

  server {
    listen 8082;
    server_name microservice-gateway;
    location / {
      proxy_redirect off;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_pass http://fares; # reverse proxy
    }
  }

  server {
    listen 8081;
    server_name microservice-gateway;
    location / {
      proxy_redirect off;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_pass http://checkin; # reverse proxy
    }
  }

  server {
    listen 8080;
    server_name microservice-gateway;
    location / {
      proxy_redirect off;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_pass http://book; # reverse proxy
    }
  }
}
